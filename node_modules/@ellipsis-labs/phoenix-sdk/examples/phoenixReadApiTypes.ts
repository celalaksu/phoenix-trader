import { deserialize, serialize, Schema } from "borsh";

export class L2Level {
  priceInTicks: bigint;
  sizeInBaseLots: bigint;

  constructor({
    priceInTicks,
    sizeInBaseLots,
  }: {
    priceInTicks: bigint;
    sizeInBaseLots: bigint;
  }) {
    this.priceInTicks = priceInTicks;
    this.sizeInBaseLots = sizeInBaseLots;
  }
}

export class L2Book {
  sequenceNumber: bigint;
  bids: L2Level[];
  asks: L2Level[];

  constructor({
    sequenceNumber,
    bids,
    asks,
  }: {
    sequenceNumber: bigint;
    bids: L2Level[];
    asks: L2Level[];
  }) {
    this.sequenceNumber = sequenceNumber;
    this.bids = bids;
    this.asks = asks;
  }
}

export class RawL3BookWithoutTraders {
  sequenceNumber: bigint;
  bids: RawL3Level[];
  asks: RawL3Level[];

  constructor({
    sequenceNumber,
    bids,
    asks,
  }: {
    sequenceNumber: bigint;
    bids: RawL3Level[];
    asks: RawL3Level[];
  }) {
    this.sequenceNumber = sequenceNumber;
    this.bids = bids;
    this.asks = asks;
  }
}

export class RawL3Level {
  traderIndex: number;
  priceInTicks: bigint;
  orderSequenceNumber: bigint;
  sizeInBaseLots: bigint;
  lastValidUnixTimestampInSeconds: bigint | null;
  lastValidSlot: bigint | null;

  constructor({
    traderIndex,
    priceInTicks,
    orderSequenceNumber,
    sizeInBaseLots,
    lastValidUnixTimestampInSeconds,
    lastValidSlot,
  }: {
    traderIndex: number;
    priceInTicks: bigint;
    orderSequenceNumber: bigint;
    sizeInBaseLots: bigint;
    lastValidUnixTimestampInSeconds: bigint | null;
    lastValidSlot: bigint | null;
  }) {
    this.traderIndex = traderIndex;
    this.priceInTicks = priceInTicks;
    this.orderSequenceNumber = orderSequenceNumber;
    this.sizeInBaseLots = sizeInBaseLots;
    this.lastValidUnixTimestampInSeconds = lastValidUnixTimestampInSeconds;
    this.lastValidSlot = lastValidSlot;
  }
}

export class OpenOrders {
  orders: MarketOpenOrders[];

  constructor(orders: MarketOpenOrders[]) {
    this.orders = orders;
  }
}

export class MarketOpenOrders {
  sequenceNumber: bigint;
  marketKey: Uint8Array;
  orders: OpenOrder[];

  constructor(
    sequenceNumber: bigint,
    marketKey: Uint8Array,
    orders: OpenOrder[]
  ) {
    this.sequenceNumber = sequenceNumber;
    this.marketKey = marketKey;
    this.orders = orders;
  }
}

export class OpenOrder {
  priceInTicks: bigint;
  orderSequenceNumber: bigint;
  sizeInBaseLots: bigint;

  constructor(
    priceInTicks: bigint,
    orderSequenceNumber: bigint,
    sizeInBaseLots: bigint
  ) {
    this.priceInTicks = priceInTicks;
    this.orderSequenceNumber = orderSequenceNumber;
    this.sizeInBaseLots = sizeInBaseLots;
  }
}

export class L2BookWithOpenOrders {
  sequenceNumber: bigint;
  bids: L2Level[];
  asks: L2Level[];
  orders: OpenOrder[];

  constructor(props: {
    sequenceNumber: bigint;
    bids: L2Level[];
    asks: L2Level[];
    orders: OpenOrder[];
  }) {
    this.sequenceNumber = props.sequenceNumber;
    this.bids = props.bids;
    this.asks = props.asks;
    this.orders = props.orders;
  }
}

export class L3BookWithOpenOrders {
  sequenceNumber: bigint;
  bids: RawL3Level[];
  asks: RawL3Level[];
  orders: OpenOrder[];

  constructor(
    sequenceNumber: bigint,
    bids: RawL3Level[],
    asks: RawL3Level[],
    orders: OpenOrder[]
  ) {
    this.sequenceNumber = sequenceNumber;
    this.bids = bids;
    this.asks = asks;
    this.orders = orders;
  }
}

export class TraderBalances {
  balances: TraderBalancesPerMarket[];

  constructor(balances: TraderBalancesPerMarket[]) {
    this.balances = balances;
  }
}

export class TraderBalancesPerMarket {
  sequenceNumber: bigint;
  marketKey: Uint8Array;
  baseLotsLocked: bigint;
  baseLotsFree: bigint;
  quoteLotsLocked: bigint;
  quoteLotsFree: bigint;

  constructor(
    sequenceNumber: bigint,
    marketKey: Uint8Array,
    baseLotsLocked: bigint,
    baseLotsFree: bigint,
    quoteLotsLocked: bigint,
    quoteLotsFree: bigint
  ) {
    this.sequenceNumber = sequenceNumber;
    this.marketKey = marketKey;
    this.baseLotsLocked = baseLotsLocked;
    this.baseLotsFree = baseLotsFree;
    this.quoteLotsLocked = quoteLotsLocked;
    this.quoteLotsFree = quoteLotsFree;
  }
}

export const PhoenixReadApiSchema: Schema = new Map<any, any>([
  [
    L2Level,
    {
      kind: "struct",
      fields: [
        ["priceInTicks", "u64"],
        ["sizeInBaseLots", "u64"],
      ],
    },
  ],
  [
    L2Book,
    {
      kind: "struct",
      fields: [
        ["sequenceNumber", "u64"],
        ["bids", [L2Level]],
        ["asks", [L2Level]],
      ],
    },
  ],
  [
    RawL3Level,
    {
      kind: "struct",
      fields: [
        ["traderIndex", "u16"],
        ["priceInTicks", "u64"],
        ["orderSequenceNumber", "u64"],
        ["sizeInBaseLots", "u64"],
        ["lastValidUnixTimestampInSeconds", { kind: "option", type: "u64" }],
        ["lastValidSlot", { kind: "option", type: "u64" }],
      ],
    },
  ],
  [
    OpenOrder,
    {
      kind: "struct",
      fields: [
        ["priceInTicks", "u64"],
        ["orderSequenceNumber", "u64"],
        ["sizeInBaseLots", "u64"],
      ],
    },
  ],
  [
    MarketOpenOrders,
    {
      kind: "struct",
      fields: [
        ["sequenceNumber", "u64"],
        ["marketKey", [32]],
        ["orders", [OpenOrder]],
      ],
    },
  ],
  [OpenOrders, { kind: "struct", fields: [["orders", [MarketOpenOrders]]] }],
  [
    RawL3BookWithoutTraders,
    {
      kind: "struct",
      fields: [
        ["sequenceNumber", "u64"],
        ["bids", [RawL3Level]],
        ["asks", [RawL3Level]],
      ],
    },
  ],
  [
    L2BookWithOpenOrders,
    {
      kind: "struct",
      fields: [
        ["sequenceNumber", "u64"],
        ["bids", [L2Level]], // Make sure L2Level is defined properly
        ["asks", [L2Level]],
        ["orders", [OpenOrder]],
      ],
    },
  ],
  [
    L3BookWithOpenOrders,
    {
      kind: "struct",
      fields: [
        ["sequenceNumber", "u64"],
        ["bids", [RawL3Level]],
        ["asks", [RawL3Level]],
        ["orders", [OpenOrder]],
      ],
    },
  ],
  [
    TraderBalancesPerMarket,
    {
      kind: "struct",
      fields: [
        ["sequenceNumber", "u64"],
        ["marketKey", [32]],
        ["baseLotsLocked", "u64"],
        ["baseLotsFree", "u64"],
        ["quoteLotsLocked", "u64"],
        ["quoteLotsFree", "u64"],
      ],
    },
  ],
  [
    TraderBalances,
    { kind: "struct", fields: [["balances", [TraderBalancesPerMarket]]] },
  ],
]);
